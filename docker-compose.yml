version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: alphaweb_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: alphacollect_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - alphaweb_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: alphaweb_backend
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: database
      DATABASE_URL: postgresql://postgres:${DB_PASSWORD:-your_secure_password}@database:5432/alphacollect_db
    volumes:
      - ./backend/uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - alphaweb_network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: alphaweb_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: http://backend:5000
    ports:
      - "3000:3000"
    networks:
      - alphaweb_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: alphaweb_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - alphaweb_network
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
    driver: local

networks:
  alphaweb_network:
    driver: bridge
